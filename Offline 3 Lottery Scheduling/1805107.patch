diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..2578ebd
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,10 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "stat.h": "c",
+        "user.h": "c",
+        "defs.h": "c",
+        "pstat.h": "c",
+        "param.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..bacc014 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o\
+  $K/randomPM.o\
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
+	$U/_testprocinfo\
+	$U/_testticket\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +158,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8752a7b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -1,3 +1,5 @@
+#include "pstat.h"
+
 struct buf;
 struct context;
 struct file;
@@ -9,6 +11,10 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+
+//randomPM.c
+uint64 lcg_parkmiller();
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -63,6 +69,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             getFreeMemorySize(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +113,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             getProcNumber(void);
+void            processinfo(struct pstat*);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..b0f1ecb 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,15 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int getFreeMemorySize()
+{
+  struct run  *r;
+  int cnt=0;
+  acquire(&kmem.lock);
+  for(r = kmem.freelist; r; r=r->next){
+    cnt += PGSIZE;
+  }
+  release(&kmem.lock);
+  return cnt;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..ae5b1db 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -145,6 +145,12 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  
+  p->traceID = 0;
+  // p->ticket_original = 1;
+  // p->ticket_current = 1;
+  // p->time_slice = 0;
+  // printf("in allocproc")
 
   return p;
 }
@@ -169,6 +175,10 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->traceID = 0;
+  p->ticket_original = 0;
+  p->ticket_current = 0;
+  p->time_slice = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -250,6 +260,10 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
+  p->ticket_original = 1;
+  p->ticket_current = 1;
+  p->time_slice = 0;
+  
 
   release(&p->lock);
 }
@@ -316,6 +330,9 @@ fork(void)
 
   acquire(&wait_lock);
   np->parent = p;
+  np->ticket_original = p->ticket_original;
+  np->ticket_current = np->ticket_original;
+  np->time_slice = 0;
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -434,6 +451,36 @@ wait(uint64 addr)
   }
 }
 
+int reset_tickets(void){
+  // printf("reset called.");
+  struct proc* p;
+  int sum = 0;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNABLE){//unused check not necessary
+      sum += p->ticket_current;
+    }
+    release(&p->lock);
+  }
+
+  //make sure once more
+  // if(sum != 0) return -1;
+  // printf("sum: %d ",sum);
+  sum = 0;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED){
+      p->ticket_current = p->ticket_original;
+      sum += p->ticket_current;
+    }    
+    release(&p->lock);
+  }
+  // printf("sum: %d\n",sum);
+  return 1;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -448,26 +495,56 @@ scheduler(void)
   struct cpu *c = mycpu();
   
   c->proc = 0;
+
   for(;;){
-    // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    // * only calculating runnables' tickets for probability
+    int runnableTicketSum = 0;
+    for(p = proc; p < &proc[NPROC]; p++){
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(p->state == RUNNABLE){
+        runnableTicketSum += p->ticket_current;
       }
       release(&p->lock);
     }
+
+    //if all proc tickets are 0 then need to be reset
+    if(runnableTicketSum <= 0){
+      if(reset_tickets() < 0) panic("ERROR RESET");
+      continue;
+    }
+
+    int randomNumber = lcg_parkmiller() % runnableTicketSum;
+    if(randomNumber < 0) panic("random negative\n");
+    // printf("num: %d\n",randomNumber);
+    int nowSum = 0;
+
+    for(p = proc; p < &proc[NPROC]; p++){
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        nowSum += p->ticket_current;
+        if(randomNumber < nowSum){
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          p->time_slice++;
+          p->ticket_current--;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          release(&p->lock);
+          //new allocation should begin
+          break;
+        }
+      }
+      release(&p->lock);  
+    }
+
   }
 }
 
@@ -681,3 +758,37 @@ procdump(void)
     printf("\n");
   }
 }
+
+//we need it for sysinfo system call  
+int getProcNumber(void)
+{
+  int cnt=0;
+  struct proc *p;
+  for(p=proc;p < &proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    if(p->state != UNUSED) cnt++;
+    release(&p->lock);
+  }
+  return cnt;
+}
+
+void processinfo(struct pstat* processStat)
+{
+  struct proc* p;
+  int i;
+  for(p=proc,i=0;p<&proc[NPROC];p++,i++)
+  {
+    acquire(&p->lock);
+    
+    processStat->pid[i] = p->pid;
+    processStat->inuse[i] = (p->state != UNUSED);
+    processStat->tickets_original[i] = p->ticket_original;
+    processStat->tickets_current[i] = p->ticket_current;
+    processStat->time_slices[i] = p->time_slice;
+
+    // printf("pid: %d, pname: %s, ticket: %d\n",p->pid,p->name,p->ticket_current);
+    release(&p->lock);
+  }
+  return;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..4b339e2 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -46,7 +46,7 @@ struct trapframe {
   /*  16 */ uint64 kernel_trap;   // usertrap()
   /*  24 */ uint64 epc;           // saved user program counter
   /*  32 */ uint64 kernel_hartid; // saved kernel tp
-  /*  40 */ uint64 ra;
+  /*  40 */ uint64 ra; 
   /*  48 */ uint64 sp;
   /*  56 */ uint64 gp;
   /*  64 */ uint64 tp;
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  int traceID;              // traceID set by SYS_trace
+  int ticket_original;
+  int ticket_current;
+  int time_slice;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/randomPM.c b/kernel/randomPM.c
new file mode 100644
index 0000000..42acf36
--- /dev/null
+++ b/kernel/randomPM.c
@@ -0,0 +1,17 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "syscall.h"
+#include "defs.h"
+
+// * reproducible --> not checkable because of timing of calls. can it be solved?
+
+uint64 state = 1805107;
+
+uint64 lcg_parkmiller()
+{
+	return state = state * 48271 % 0x7fffffff;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5c6945a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+extern uint64 sys_getpinfo(void);
+extern uint64 sys_settickets(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +130,41 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+[SYS_getpinfo] sys_getpinfo,
+[SYS_settickets] sys_settickets,
 };
 
+static char* syscallNames[] = {
+  "fork",
+  "exit",
+  "wait",
+  "pipe",
+  "read",
+  "kill",
+  "exec",
+  "fstat",
+  "chdir",
+  "dup",
+  "getpid",
+  "sbrk",
+  "sleep",
+  "uptime",
+  "open",
+  "write",
+  "mknod",
+  "unlink",
+  "link",
+  "mkdir",
+  "close",
+  "trace",
+  "sysinfo",
+  "getpinfo",
+  "settickets",
+};
+
+
 void
 syscall(void)
 {
@@ -139,6 +176,11 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    
+    if(num == p->traceID){
+      printf("pid: %d, syscall: %s, return value: %d\n", p->pid, syscallNames[num-1], p->trapframe->a0);
+      printf("Process Name: %s\n", p->name);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b8f5567 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
+#define SYS_getpinfo 24
+#define SYS_settickets 25
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..040dcde 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,50 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  argint(0,&myproc()->traceID); //setting the system call to trace in proc
+  return 0;
+}
+
+uint64
+sys_sysinfo(void)
+{
+  printf("\nsysinfo system call prints:\n");
+  printf("free-memory: %d bytes\n", getFreeMemorySize());
+  printf("n_proc: %d\n\n",getProcNumber());
+  return 1;
+}
+
+uint64 sys_getpinfo(void)
+{
+  // struct pstat* p;
+  uint64 p;
+  argaddr(0,&p);  
+  struct pstat processStat;
+  // if(copyin(myproc()->pagetable,(char*)&processStat,p,sizeof(struct pstat)) < 0)
+  // {
+  //   return;
+  // }
+  //TODO: check copyin success
+  processinfo(&processStat);
+  if( copyout( myproc()->pagetable, p, (char*)&processStat, sizeof(struct pstat)) < 0 ){
+    return -1;
+  }
+  return 0;
+}
+
+
+uint64 sys_settickets(void)
+{
+  // printf("setting tickets");
+  int num;
+  argint(0,&num);
+  
+  if(num < 0) return -1;
+  myproc()->ticket_original = num;
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..25ade16
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..e2eafa8
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,27 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main(int argc, char **argv)
+{
+    // settickets(5);
+    int ticketVal;
+    if(argc < 2 || !(ticketVal=atoi(argv[1]))){
+        printf("Usage: testprocinfo <ticketVal>\n");
+        exit(1);
+    }
+    settickets(ticketVal);
+    struct pstat processStat;
+    if(getpinfo(&processStat) < 0){
+        printf("error calling getpinfo\n");
+    }
+    printf("PID | In Use | Original Tickets | Current Tickets | Time Slices\n");
+    
+    for(int i=0;i<NPROC;i++){
+        if(processStat.inuse[i] == 0) continue;
+        // printf("%d %d %d %d %d\n", processStat.pid[i], processStat.inuse[i], processStat.tickets_original[i], processStat.tickets_current[i], processStat.time_slices[i]);
+        printf("%d\t%d\t%d\t\t\t%d\t\t%d\n", processStat.pid[i], processStat.inuse[i], processStat.tickets_original[i], processStat.tickets_current[i], processStat.time_slices[i]);
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..573c0b6
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,22 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{   
+    int totalProc, ticketVal;
+    if(argc < 3 || !(totalProc=atoi(argv[1])) || !(ticketVal=atoi(argv[2]))){
+        printf("Usage: testtickets <processNumber> <ticketVal>\n");
+        exit(1);
+    }
+    settickets(ticketVal);
+    for(int i=0;i<totalProc-1;i++){
+        int rc = fork();
+        if(rc < 0){
+            printf("fork failed");
+        }
+        if(rc == 0) break;
+    }
+    while(1);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..58d347a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+#include "kernel/pstat.h"
 struct stat;
 
 // system calls
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(void);
+int getpinfo(struct pstat*);
+int settickets(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +44,6 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+
+//ls.c
+// void ls(char *path);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..6dd7033 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
+entry("getpinfo");
+entry("settickets");
